// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "title": "SEO Parser server",
    "version": "1.0.0"
  },
  "basePath": "/api/v1",
  "paths": {
    "/parsers": {
      "get": {
        "security": [],
        "summary": "List of parsers",
        "operationId": "getParsers",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Parser"
              }
            }
          },
          "502": {
            "description": "Database is down"
          }
        }
      }
    },
    "/tasks": {
      "get": {
        "summary": "Full list of tasks",
        "operationId": "getTasks",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Task"
              }
            }
          },
          "502": {
            "description": "Database is down"
          }
        }
      },
      "post": {
        "security": [],
        "summary": "Creates a new task",
        "operationId": "addTask",
        "parameters": [
          {
            "description": "The task data to create",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "url",
                  "parsers"
                ],
                "properties": {
                  "parsers": {
                    "description": "Names of the parsers we should use for this URL",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "url": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Task created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "description": "ID of the created task",
                  "type": "integer"
                },
                "status": {
                  "description": "Message from backend",
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request data"
          },
          "502": {
            "description": "Database is down"
          }
        }
      }
    },
    "/tasks/{id}": {
      "get": {
        "security": [],
        "summary": "Get status of the task",
        "operationId": "getTaskStatus",
        "parameters": [
          {
            "$ref": "#/parameters/TaskID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "404": {
            "description": "Task id not found"
          },
          "502": {
            "description": "database is down"
          }
        }
      }
    },
    "/tasks/{id}/data": {
      "get": {
        "security": [],
        "summary": "Get results of the work",
        "operationId": "getTaskData",
        "parameters": [
          {
            "$ref": "#/parameters/TaskID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UrlResult"
              }
            }
          },
          "404": {
            "description": "Task id not found"
          },
          "502": {
            "description": "database is down"
          }
        }
      }
    }
  },
  "definitions": {
    "AuthToken": {
      "type": "string"
    },
    "Parser": {
      "description": "representation of Parser",
      "type": "object",
      "title": "Parser",
      "required": [
        "name",
        "description"
      ],
      "properties": {
        "description": {
          "type": "string",
          "title": "Description of the parser"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Task": {
      "type": "object",
      "title": "Task",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "finished_at": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "integer"
        },
        "started_at": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "A current status of the task",
          "type": "string",
          "enum": [
            "done",
            "runned",
            "waiting",
            "failed"
          ]
        }
      }
    },
    "UrlResult": {
      "description": "results of the url from task",
      "type": "object",
      "title": "URL Result",
      "properties": {
        "data": {
          "type": "object"
        },
        "url": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "TaskID": {
      "type": "integer",
      "description": "The ID of the Task",
      "name": "id",
      "in": "path",
      "required": true
    }
  },
  "securityDefinitions": {
    "ApiKey": {
      "type": "apiKey",
      "name": "x-token",
      "in": "header"
    }
  },
  "security": [
    {
      "ApiKey": []
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "title": "SEO Parser server",
    "version": "1.0.0"
  },
  "basePath": "/api/v1",
  "paths": {
    "/parsers": {
      "get": {
        "security": [],
        "summary": "List of parsers",
        "operationId": "getParsers",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Parser"
              }
            }
          },
          "502": {
            "description": "Database is down"
          }
        }
      }
    },
    "/tasks": {
      "get": {
        "summary": "Full list of tasks",
        "operationId": "getTasks",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Task"
              }
            }
          },
          "502": {
            "description": "Database is down"
          }
        }
      },
      "post": {
        "security": [],
        "summary": "Creates a new task",
        "operationId": "addTask",
        "parameters": [
          {
            "description": "The task data to create",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "url",
                  "parsers"
                ],
                "properties": {
                  "parsers": {
                    "description": "Names of the parsers we should use for this URL",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "url": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Task created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "description": "ID of the created task",
                  "type": "integer"
                },
                "status": {
                  "description": "Message from backend",
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request data"
          },
          "502": {
            "description": "Database is down"
          }
        }
      }
    },
    "/tasks/{id}": {
      "get": {
        "security": [],
        "summary": "Get status of the task",
        "operationId": "getTaskStatus",
        "parameters": [
          {
            "type": "integer",
            "description": "The ID of the Task",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "404": {
            "description": "Task id not found"
          },
          "502": {
            "description": "database is down"
          }
        }
      }
    },
    "/tasks/{id}/data": {
      "get": {
        "security": [],
        "summary": "Get results of the work",
        "operationId": "getTaskData",
        "parameters": [
          {
            "type": "integer",
            "description": "The ID of the Task",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UrlResult"
              }
            }
          },
          "404": {
            "description": "Task id not found"
          },
          "502": {
            "description": "database is down"
          }
        }
      }
    }
  },
  "definitions": {
    "AuthToken": {
      "type": "string"
    },
    "Parser": {
      "description": "representation of Parser",
      "type": "object",
      "title": "Parser",
      "required": [
        "name",
        "description"
      ],
      "properties": {
        "description": {
          "type": "string",
          "title": "Description of the parser"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Task": {
      "type": "object",
      "title": "Task",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "finished_at": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "integer"
        },
        "started_at": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "A current status of the task",
          "type": "string",
          "enum": [
            "done",
            "runned",
            "waiting",
            "failed"
          ]
        }
      }
    },
    "UrlResult": {
      "description": "results of the url from task",
      "type": "object",
      "title": "URL Result",
      "properties": {
        "data": {
          "type": "object"
        },
        "url": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "TaskID": {
      "type": "integer",
      "description": "The ID of the Task",
      "name": "id",
      "in": "path",
      "required": true
    }
  },
  "securityDefinitions": {
    "ApiKey": {
      "type": "apiKey",
      "name": "x-token",
      "in": "header"
    }
  },
  "security": [
    {
      "ApiKey": []
    }
  ]
}`))
}
