// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetParsersHandlerFunc turns a function with the right signature into a get parsers handler
type GetParsersHandlerFunc func(GetParsersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetParsersHandlerFunc) Handle(params GetParsersParams) middleware.Responder {
	return fn(params)
}

// GetParsersHandler interface for that can handle valid get parsers params
type GetParsersHandler interface {
	Handle(GetParsersParams) middleware.Responder
}

// NewGetParsers creates a new http.Handler for the get parsers operation
func NewGetParsers(ctx *middleware.Context, handler GetParsersHandler) *GetParsers {
	return &GetParsers{Context: ctx, Handler: handler}
}

/*GetParsers swagger:route GET /parsers getParsers

List of parsers

*/
type GetParsers struct {
	Context *middleware.Context
	Handler GetParsersHandler
}

func (o *GetParsers) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetParsersParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
