// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// AddTaskHandlerFunc turns a function with the right signature into a add task handler
type AddTaskHandlerFunc func(AddTaskParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddTaskHandlerFunc) Handle(params AddTaskParams) middleware.Responder {
	return fn(params)
}

// AddTaskHandler interface for that can handle valid add task params
type AddTaskHandler interface {
	Handle(AddTaskParams) middleware.Responder
}

// NewAddTask creates a new http.Handler for the add task operation
func NewAddTask(ctx *middleware.Context, handler AddTaskHandler) *AddTask {
	return &AddTask{Context: ctx, Handler: handler}
}

/*AddTask swagger:route POST /tasks addTask

Creates a new task

*/
type AddTask struct {
	Context *middleware.Context
	Handler AddTaskHandler
}

func (o *AddTask) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddTaskParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// AddTaskCreatedBody add task created body
// swagger:model AddTaskCreatedBody
type AddTaskCreatedBody struct {

	// ID of the created task
	ID int64 `json:"id,omitempty"`

	// Message from backend
	Status string `json:"status,omitempty"`
}

// Validate validates this add task created body
func (o *AddTaskCreatedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddTaskCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddTaskCreatedBody) UnmarshalBinary(b []byte) error {
	var res AddTaskCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AddTaskParamsBodyItems0 add task params body items0
// swagger:model AddTaskParamsBodyItems0
type AddTaskParamsBodyItems0 struct {

	// Names of the parsers we should use for this URL
	// Required: true
	Parsers []string `json:"parsers"`

	// url
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this add task params body items0
func (o *AddTaskParamsBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateParsers(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddTaskParamsBodyItems0) validateParsers(formats strfmt.Registry) error {

	if err := validate.Required("parsers", "body", o.Parsers); err != nil {
		return err
	}

	return nil
}

func (o *AddTaskParamsBodyItems0) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", o.URL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddTaskParamsBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddTaskParamsBodyItems0) UnmarshalBinary(b []byte) error {
	var res AddTaskParamsBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
