// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"encoding/json"
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "github.com/crxfoz/seo_metrick_parser/server/api/models"
)

// ToggleParserHandlerFunc turns a function with the right signature into a toggle parser handler
type ToggleParserHandlerFunc func(ToggleParserParams, *models.AuthToken) middleware.Responder

// Handle executing the request and returning a response
func (fn ToggleParserHandlerFunc) Handle(params ToggleParserParams, principal *models.AuthToken) middleware.Responder {
	return fn(params, principal)
}

// ToggleParserHandler interface for that can handle valid toggle parser params
type ToggleParserHandler interface {
	Handle(ToggleParserParams, *models.AuthToken) middleware.Responder
}

// NewToggleParser creates a new http.Handler for the toggle parser operation
func NewToggleParser(ctx *middleware.Context, handler ToggleParserHandler) *ToggleParser {
	return &ToggleParser{Context: ctx, Handler: handler}
}

/*ToggleParser swagger:route POST /parsers/{id} toggleParser

Enable\Disable parser

*/
type ToggleParser struct {
	Context *middleware.Context
	Handler ToggleParserHandler
}

func (o *ToggleParser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewToggleParserParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.AuthToken
	if uprinc != nil {
		principal = uprinc.(*models.AuthToken) // this is really a models.AuthToken, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ToggleParserBody toggle parser body
// swagger:model ToggleParserBody
type ToggleParserBody struct {

	// status
	// Enum: [enable disable]
	Status string `json:"status,omitempty"`
}

// Validate validates this toggle parser body
func (o *ToggleParserBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var toggleParserBodyTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enable","disable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		toggleParserBodyTypeStatusPropEnum = append(toggleParserBodyTypeStatusPropEnum, v)
	}
}

const (

	// ToggleParserBodyStatusEnable captures enum value "enable"
	ToggleParserBodyStatusEnable string = "enable"

	// ToggleParserBodyStatusDisable captures enum value "disable"
	ToggleParserBodyStatusDisable string = "disable"
)

// prop value enum
func (o *ToggleParserBody) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, toggleParserBodyTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *ToggleParserBody) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("status"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ToggleParserBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ToggleParserBody) UnmarshalBinary(b []byte) error {
	var res ToggleParserBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
